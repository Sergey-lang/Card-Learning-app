{"version":3,"sources":["03-Components/SendingForm/SendingForm.tsx","03-Components/SendingForm/SendingForm.module.css","01-API/02-password-api.ts","02-Pages/03-PasswordRecovery/resetPassword-thunks.ts","02-Pages/03-PasswordRecovery/PasswordRecoveryPage.tsx"],"names":["SendingForm","React","memo","formName","formDescription","callback","status","inputPlaceholder","inputType","buttonName","btnDisabled","navLinkPath","useState","value","setValue","buttonOnClick","className","s","formWrapper","title","type","onEnter","placeholder","onChange","e","currentTarget","onClick","disabled","to","inactive","module","exports","passwordAPI","email","instance","post","from","message","password","token","resetPasswordToken","sendRecoveryEmail","dispatch","a","setAppStatus","error","response","data","resetPassword","PasswordRecoveryPage","appStatus","useSelector","appSelectors","selectorAppStatus","useDispatch","useEffect","PATH","LOGIN"],"mappings":"qNAsBaA,EAAmCC,IAAMC,MAAK,YAiBrD,IAfEC,EAeH,EAfGA,SACAC,EAcH,EAdGA,gBAEAC,EAYH,EAZGA,SACAC,EAWH,EAXGA,OACAC,EAUH,EAVGA,iBAEAC,EAQH,EARGA,UACAC,EAOH,EAPGA,WACAC,EAMH,EANGA,YAEAC,EAIH,EAJGA,YAIH,6IAEyBC,mBAAiB,KAF1C,mBAEMC,EAFN,KAEaC,EAFb,KAQKC,EAAgB,WAClBV,EAASQ,GAETC,EAAS,KAGb,OACI,sBAAKE,UAAWC,IAAEC,YAAlB,UACI,6BAAKf,IACL,gCACI,oBAAIa,UAAWC,IAAEE,MAAjB,SAAyBf,IAErBE,GAAU,+BAAOA,IAErB,8BACI,gCACI,cAAC,IAAD,CAAOc,KAAMZ,EACNa,QAASN,EACTF,MAAOA,EACPS,YAAaf,GAAoBA,EACjCgB,SAxBN,SAACC,GAClBV,EAASU,EAAEC,cAAcZ,UAwBT,cAAC,IAAD,CAAiBa,QAASX,EACTY,SAAUjB,EAD3B,SACyCD,IAEzC,uBACA,wCAAU,cAAC,IAAD,CAASmB,GAAIjB,GAA4B,GAChCK,UAAWC,IAAEY,SADtB,wC,oBCvElCC,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,SAAW,gC,wICCnDC,EAAc,SAENC,GACb,OAAOC,IAASC,KAA4C,cAAe,CACvEF,MAAOA,EACPG,KAAM,iDACNC,QAAQ,oPANPL,EAAc,SAaTM,EAAkBC,GAC5B,OAAOL,IAASC,KAA0C,wBAAyB,CAC/EG,WACAE,mBAAoBD,K,OCdnBE,EAAoB,SAACR,GAAD,8CAAmB,WAAOS,GAAP,eAAAC,EAAA,6DAChDD,EAASE,YAAa,CAACtC,OAAQ,UAAWuC,MAAO,QADD,kBAG1Bb,EAA6BC,GAHH,OAIzB,MAJyB,OAIpC3B,OACJoC,EAASE,YAAa,CAClBtC,OAAQ,YACRuC,MAAM,eAAD,OAAiBZ,EAAjB,8DAGTS,EAASE,YAAa,CAACtC,OAAQ,SAAUuC,MAAO,4BAVR,gDAatCA,EAAQ,KAAEC,SACV,KAAEA,SAASC,KAAKF,MACf,KAAER,QAAU,gCACnBK,EAASE,YAAa,CAACtC,OAAQ,SAAUuC,MAAOA,KAhBJ,yDAAnB,uDAoBpBG,EAAgB,SAACV,EAAkBC,GAAnB,8CAAiD,WAAOG,GAAP,eAAAC,EAAA,6DAC1ED,EAASE,YAAa,CAACtC,OAAQ,UAAWuC,MAAO,QADyB,kBAGpDb,EAA0BM,EAAUC,GAHgB,OAInD,MAJmD,OAI9DjC,OACJoC,EAASE,YAAa,CAACtC,OAAQ,YAAauC,MAAO,uCAEnDH,EAASE,YAAa,CAACtC,OAAQ,SAAUuC,MAAO,4BAPkB,gDAUhEA,EAAQ,KAAEC,SACV,KAAEA,SAASC,KAAKF,MACf,KAAER,QAAU,gCACnBK,EAASE,YAAa,CAACtC,OAAQ,SAAUuC,MAAOA,KAbsB,yDAAjD,wD,iCCxB7B,kFASMI,EAAiChD,IAAMC,MAAK,WAC9C,IAAMgD,EAAYC,YAAkCC,IAAaC,mBAM3DX,EAAWY,cAOjB,OANAC,qBAAU,WACN,OAAO,WACHb,EAASE,YAAa,CAACtC,OAAQ,OAAQuC,MAAO,WAEnD,IAGC,8BACI,cAAC,IAAD,CAAa1C,SAAU,oBACVC,gBAAe,kFACfC,SAfH,SAAC4B,GACfS,EAASD,YAAkBR,KAeV1B,iBAAkB,2BAClBC,UAAW,QACXC,WAAY,OACZC,YAA2B,YAAdwC,EACbvC,YAAa6C,IAAKC,aAM5BR","file":"static/js/3.3fc28ae5.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './SendingForm.module.css';\r\nimport {UniversalButton} from '../Button/FormButton/UniversalButton';\r\nimport {Input} from '../Input/Input';\r\n\r\ntype PropsType = {\r\n    formName: string\r\n    formDescription?: string\r\n    callback: (value1: string, value2?: string | undefined) => void\r\n    status?: string\r\n    inputPlaceholder?: string\r\n    inputType: string\r\n\r\n    buttonName: string\r\n    btnDisabled: boolean\r\n\r\n    navLinkPath?: string\r\n\r\n    restProps?: any\r\n}\r\n\r\nexport const SendingForm: React.FC<PropsType> = React.memo((\r\n    {\r\n        formName,\r\n        formDescription,\r\n\r\n        callback,\r\n        status,\r\n        inputPlaceholder,\r\n\r\n        inputType,\r\n        buttonName,\r\n        btnDisabled,\r\n\r\n        navLinkPath,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n\r\n    const [value, setValue] = useState<string>('')\r\n\r\n    const inputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    const buttonOnClick = () => {\r\n        callback(value)\r\n        //clear local state field\r\n        setValue('')\r\n    }\r\n\r\n    return (\r\n        <div className={s.formWrapper}>\r\n            <h4>{formName}</h4>\r\n            <div>\r\n                <h3 className={s.title}>{formDescription}</h3>\r\n                {\r\n                    status && <span>{status}</span>\r\n                }\r\n                <div>\r\n                    <div>\r\n                        <Input type={inputType}\r\n                               onEnter={buttonOnClick}\r\n                               value={value}\r\n                               placeholder={inputPlaceholder && inputPlaceholder}\r\n                               onChange={inputHandler}/>\r\n                        <UniversalButton onClick={buttonOnClick}\r\n                                         disabled={btnDisabled}>{buttonName}\r\n                        </UniversalButton>\r\n                        <hr/>\r\n                        <p> Let's <NavLink to={navLinkPath ? navLinkPath : ''}\r\n                                           className={s.inactive}>\r\n                            Sign in </NavLink></p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"SendingForm_title__ateQS\",\"inactive\":\"SendingForm_inactive__1qzA4\"};","import {APIResponseType, instance} from './api';\r\n\r\nexport const passwordAPI = {\r\n\r\n    recoveryPassword(email: string) {\r\n        return instance.post<APIResponseType<PasswordRecoveryType>>('auth/forgot', {\r\n            email: email,\r\n            from: 'test-front-admin <serega.kuharionok@yandex.ru>',\r\n            message: `<div style=\"background-color: #00ff00; padding: 15px\">\r\n                            password recovery link: \r\n                     <a href='http://localhost:3000/FridayProject#/newPassword/$token$'>Click</a>\r\n                     </div>`\r\n        });\r\n    },\r\n\r\n    resetPassword(password: string, token: string | undefined) {\r\n        return instance.post<APIResponseType<SetNewPasswordType>>('auth/set-new-password', {\r\n            password,\r\n            resetPasswordToken: token\r\n        });\r\n    }\r\n}\r\n\r\nexport type PasswordRecoveryType = {\r\n    answer: boolean\r\n    html: boolean\r\n    info: string\r\n    success: boolean\r\n}\r\n\r\nexport type SetNewPasswordType = {\r\n    info: string\r\n    error: string\r\n}","import {Dispatch} from 'redux';\r\nimport {passwordAPI} from '../../01-API/02-password-api';\r\nimport {setAppStatus} from '../../00-App/app-reducer';\r\n\r\nexport const sendRecoveryEmail = (email: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    try {\r\n        const res = await passwordAPI.recoveryPassword(email)\r\n        if (res.status === 200) {\r\n            dispatch(setAppStatus({\r\n                status: 'succeeded',\r\n                error: `if account \"${email}\" exist, an email will be sent with further instruction`\r\n            }))\r\n        } else {\r\n            dispatch(setAppStatus({status: 'failed', error: 'Something went wrong:('}))\r\n        }\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}\r\n\r\nexport const resetPassword = (password: string, token: string | undefined) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    try {\r\n        const res = await passwordAPI.resetPassword(password, token)\r\n        if (res.status === 200) {\r\n            dispatch(setAppStatus({status: 'succeeded', error: 'The password change is successful'}))\r\n        } else {\r\n            dispatch(setAppStatus({status: 'failed', error: 'Something went wrong:('}))\r\n        }\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {AppStoreType} from '../../00-App/store';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {SendingForm} from '../../03-Components/SendingForm/SendingForm';\r\nimport {sendRecoveryEmail} from './resetPassword-thunks';\r\nimport {setAppStatus} from '../../00-App/app-reducer';\r\nimport {PATH} from '../../00-App/Routes/Routes';\r\nimport {appSelectors} from '../../00-App/00-index';\r\n\r\nconst PasswordRecoveryPage: React.FC = React.memo(() => {\r\n    const appStatus = useSelector<AppStoreType, string>(appSelectors.selectorAppStatus)\r\n\r\n    const sendEmail = (email: string) => {\r\n        dispatch(sendRecoveryEmail(email))\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setAppStatus({status: 'idle', error: null}))\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <SendingForm formName={'RECOVERY PASSWORD'}\r\n                         formDescription={`Enter the email address you used to register and we'll send you the instruction`}\r\n                         callback={sendEmail}\r\n                         inputPlaceholder={'enter your email address'}\r\n                         inputType={'email'}\r\n                         buttonName={'Send'}\r\n                         btnDisabled={appStatus === 'loading'}\r\n                         navLinkPath={PATH.LOGIN}\r\n            />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default PasswordRecoveryPage\r\n"],"sourceRoot":""}